// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace icream.Models
{
    public partial class icreamContext : DbContext
    {
        public icreamContext()
        {
        }

        public icreamContext(DbContextOptions<icreamContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Cart> Carts { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Chef> Chefs { get; set; }
        public virtual DbSet<Clients_say> Clients_says { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<Gallery> Galleries { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<User> Users { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=icreamdb.mssql.somee.com;Initial Catalog=icreamdb;User ID=yousofkortam_SQLLogin_1;Password=qbnd39ai6q;Encrypt=False");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Cart>(entity =>
            {
                entity.HasOne(d => d.product)
                    .WithMany(p => p.Carts)
                    .HasForeignKey(d => d.product_id)
                    .HasConstraintName("FK_Carts_Products1");

                entity.HasOne(d => d.user)
                    .WithMany(p => p.Carts)
                    .HasForeignKey(d => d.user_id)
                    .HasConstraintName("FK_Carts_Users");
            });

            modelBuilder.Entity<Clients_say>(entity =>
            {
                entity.HasOne(d => d.user)
                    .WithMany(p => p.Clients_says)
                    .HasForeignKey(d => d.user_id)
                    .HasConstraintName("FK__Clients_s__user___3E52440B");
            });

            modelBuilder.Entity<Contact>(entity =>
            {
                entity.HasOne(d => d.user)
                    .WithMany(p => p.Contacts)
                    .HasForeignKey(d => d.user_id)
                    .HasConstraintName("FK_Contacts_Users");
            });

            modelBuilder.Entity<Gallery>(entity =>
            {
                entity.HasOne(d => d.category)
                    .WithMany(p => p.Galleries)
                    .HasForeignKey(d => d.category_id)
                    .HasConstraintName("FK_Gallery_Category");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.HasOne(d => d.product)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.product_id)
                    .HasConstraintName("FK_Orders_Products");

                entity.HasOne(d => d.user)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.user_id)
                    .HasConstraintName("FK_Orders_Users");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.HasOne(d => d.category)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.category_id)
                    .HasConstraintName("FK__Products__catego__3B75D760");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}